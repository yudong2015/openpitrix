// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// OpenpitrixCurrency openpitrix currency
// swagger:model openpitrixCurrency
type OpenpitrixCurrency string

const (
	// OpenpitrixCurrencyCNY captures enum value "CNY"
	OpenpitrixCurrencyCNY OpenpitrixCurrency = "CNY"
	// OpenpitrixCurrencyHKD captures enum value "HKD"
	OpenpitrixCurrencyHKD OpenpitrixCurrency = "HKD"
	// OpenpitrixCurrencyUSD captures enum value "USD"
	OpenpitrixCurrencyUSD OpenpitrixCurrency = "USD"
)

// for schema
var openpitrixCurrencyEnum []interface{}

func init() {
	var res []OpenpitrixCurrency
	if err := json.Unmarshal([]byte(`["CNY","HKD","USD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openpitrixCurrencyEnum = append(openpitrixCurrencyEnum, v)
	}
}

func (m OpenpitrixCurrency) validateOpenpitrixCurrencyEnum(path, location string, value OpenpitrixCurrency) error {
	if err := validate.Enum(path, location, value, openpitrixCurrencyEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this openpitrix currency
func (m OpenpitrixCurrency) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenpitrixCurrencyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
