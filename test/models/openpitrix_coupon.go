// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OpenpitrixCoupon openpitrix coupon
// swagger:model openpitrixCoupon
type OpenpitrixCoupon struct {

	// balance
	Balance float64 `json:"balance,omitempty"`

	// count
	Count int64 `json:"count,omitempty"`

	// coupon id
	CouponID string `json:"coupon_id,omitempty"`

	// create time
	CreateTime strfmt.DateTime `json:"create_time,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// end time
	EndTime strfmt.DateTime `json:"end_time,omitempty"`

	// limit ids
	LimitIds []string `json:"limit_ids"`

	// limit num per
	LimitNumPer int64 `json:"limit_num_per,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// remain
	Remain int64 `json:"remain,omitempty"`

	// start time
	StartTime strfmt.DateTime `json:"start_time,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// status time
	StatusTime strfmt.DateTime `json:"status_time,omitempty"`
}

// Validate validates this openpitrix coupon
func (m *OpenpitrixCoupon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimitIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenpitrixCoupon) validateLimitIds(formats strfmt.Registry) error {

	if swag.IsZero(m.LimitIds) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenpitrixCoupon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenpitrixCoupon) UnmarshalBinary(b []byte) error {
	var res OpenpitrixCoupon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
