// Code generated by go-swagger; DO NOT EDIT.

package metering_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new metering manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for metering manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
InitMetering inits metering about the skus
*/
func (a *Client) InitMetering(params *InitMeteringParams, authInfo runtime.ClientAuthInfoWriter) (*InitMeteringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitMeteringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InitMetering",
		Method:             "POST",
		PathPattern:        "/v1/metering",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitMeteringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitMeteringOK), nil

}

/*
StartMeterings starts metering about the skus
*/
func (a *Client) StartMeterings(params *StartMeteringsParams, authInfo runtime.ClientAuthInfoWriter) (*StartMeteringsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartMeteringsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StartMeterings",
		Method:             "PUT",
		PathPattern:        "/v1/metering/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartMeteringsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartMeteringsOK), nil

}

/*
StopMeterings stops metering about the skus
*/
func (a *Client) StopMeterings(params *StopMeteringsParams, authInfo runtime.ClientAuthInfoWriter) (*StopMeteringsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopMeteringsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopMeterings",
		Method:             "PUT",
		PathPattern:        "/v1/metering/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopMeteringsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopMeteringsOK), nil

}

/*
TerminateMeterings terminates metering about the skus
*/
func (a *Client) TerminateMeterings(params *TerminateMeteringsParams, authInfo runtime.ClientAuthInfoWriter) (*TerminateMeteringsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerminateMeteringsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TerminateMeterings",
		Method:             "DELETE",
		PathPattern:        "/v1/metering",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TerminateMeteringsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TerminateMeteringsOK), nil

}

/*
UpdateMetering updates metering value about the sku
*/
func (a *Client) UpdateMetering(params *UpdateMeteringParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMeteringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMeteringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateMetering",
		Method:             "PUT",
		PathPattern:        "/v1/metering",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMeteringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMeteringOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
