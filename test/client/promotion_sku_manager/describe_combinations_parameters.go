// Code generated by go-swagger; DO NOT EDIT.

package promotion_sku_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeCombinationsParams creates a new DescribeCombinationsParams object
// with the default values initialized.
func NewDescribeCombinationsParams() *DescribeCombinationsParams {
	var ()
	return &DescribeCombinationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeCombinationsParamsWithTimeout creates a new DescribeCombinationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeCombinationsParamsWithTimeout(timeout time.Duration) *DescribeCombinationsParams {
	var ()
	return &DescribeCombinationsParams{

		timeout: timeout,
	}
}

// NewDescribeCombinationsParamsWithContext creates a new DescribeCombinationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeCombinationsParamsWithContext(ctx context.Context) *DescribeCombinationsParams {
	var ()
	return &DescribeCombinationsParams{

		Context: ctx,
	}
}

// NewDescribeCombinationsParamsWithHTTPClient creates a new DescribeCombinationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeCombinationsParamsWithHTTPClient(client *http.Client) *DescribeCombinationsParams {
	var ()
	return &DescribeCombinationsParams{
		HTTPClient: client,
	}
}

/*DescribeCombinationsParams contains all the parameters to send to the API endpoint
for the describe combinations operation typically these are written to a http.Request
*/
type DescribeCombinationsParams struct {

	/*CombinationID*/
	CombinationID *string
	/*Limit*/
	Limit *int64
	/*Name*/
	Name *string
	/*Offset*/
	Offset *int64
	/*Owner*/
	Owner *string
	/*Reverse*/
	Reverse *bool
	/*SortKey*/
	SortKey *string
	/*Status*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe combinations params
func (o *DescribeCombinationsParams) WithTimeout(timeout time.Duration) *DescribeCombinationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe combinations params
func (o *DescribeCombinationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe combinations params
func (o *DescribeCombinationsParams) WithContext(ctx context.Context) *DescribeCombinationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe combinations params
func (o *DescribeCombinationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe combinations params
func (o *DescribeCombinationsParams) WithHTTPClient(client *http.Client) *DescribeCombinationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe combinations params
func (o *DescribeCombinationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCombinationID adds the combinationID to the describe combinations params
func (o *DescribeCombinationsParams) WithCombinationID(combinationID *string) *DescribeCombinationsParams {
	o.SetCombinationID(combinationID)
	return o
}

// SetCombinationID adds the combinationId to the describe combinations params
func (o *DescribeCombinationsParams) SetCombinationID(combinationID *string) {
	o.CombinationID = combinationID
}

// WithLimit adds the limit to the describe combinations params
func (o *DescribeCombinationsParams) WithLimit(limit *int64) *DescribeCombinationsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe combinations params
func (o *DescribeCombinationsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the describe combinations params
func (o *DescribeCombinationsParams) WithName(name *string) *DescribeCombinationsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the describe combinations params
func (o *DescribeCombinationsParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the describe combinations params
func (o *DescribeCombinationsParams) WithOffset(offset *int64) *DescribeCombinationsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe combinations params
func (o *DescribeCombinationsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOwner adds the owner to the describe combinations params
func (o *DescribeCombinationsParams) WithOwner(owner *string) *DescribeCombinationsParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the describe combinations params
func (o *DescribeCombinationsParams) SetOwner(owner *string) {
	o.Owner = owner
}

// WithReverse adds the reverse to the describe combinations params
func (o *DescribeCombinationsParams) WithReverse(reverse *bool) *DescribeCombinationsParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the describe combinations params
func (o *DescribeCombinationsParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSortKey adds the sortKey to the describe combinations params
func (o *DescribeCombinationsParams) WithSortKey(sortKey *string) *DescribeCombinationsParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the describe combinations params
func (o *DescribeCombinationsParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithStatus adds the status to the describe combinations params
func (o *DescribeCombinationsParams) WithStatus(status *string) *DescribeCombinationsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the describe combinations params
func (o *DescribeCombinationsParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeCombinationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CombinationID != nil {

		// query param combination_id
		var qrCombinationID string
		if o.CombinationID != nil {
			qrCombinationID = *o.CombinationID
		}
		qCombinationID := qrCombinationID
		if qCombinationID != "" {
			if err := r.SetQueryParam("combination_id", qCombinationID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Owner != nil {

		// query param owner
		var qrOwner string
		if o.Owner != nil {
			qrOwner = *o.Owner
		}
		qOwner := qrOwner
		if qOwner != "" {
			if err := r.SetQueryParam("owner", qOwner); err != nil {
				return err
			}
		}

	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool
		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {
			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}

	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string
		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {
			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
