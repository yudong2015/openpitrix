// Code generated by go-swagger; DO NOT EDIT.

package promotion_sku_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new promotion sku manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for promotion sku manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateCombination creates combination
*/
func (a *Client) CreateCombination(params *CreateCombinationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCombinationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCombinationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateCombination",
		Method:             "POST",
		PathPattern:        "/v1/metering/combination",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateCombinationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCombinationOK), nil

}

/*
CreateCombinationSku creates combination sku
*/
func (a *Client) CreateCombinationSku(params *CreateCombinationSkuParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCombinationSkuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCombinationSkuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateCombinationSku",
		Method:             "POST",
		PathPattern:        "/v1/metering/combination/sku",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateCombinationSkuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCombinationSkuOK), nil

}

/*
DeleteCombinationSkus deletes combination skus
*/
func (a *Client) DeleteCombinationSkus(params *DeleteCombinationSkusParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCombinationSkusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCombinationSkusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCombinationSkus",
		Method:             "DELETE",
		PathPattern:        "/v1/metering/combination/skus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCombinationSkusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCombinationSkusOK), nil

}

/*
DeleteCombinations deletes combinations
*/
func (a *Client) DeleteCombinations(params *DeleteCombinationsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCombinationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCombinationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCombinations",
		Method:             "DELETE",
		PathPattern:        "/v1/metering/combinations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCombinationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCombinationsOK), nil

}

/*
DescribeCombinationSkus describes combination skus
*/
func (a *Client) DescribeCombinationSkus(params *DescribeCombinationSkusParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeCombinationSkusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeCombinationSkusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeCombinationSkus",
		Method:             "GET",
		PathPattern:        "/v1/metering/combination/skus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeCombinationSkusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeCombinationSkusOK), nil

}

/*
DescribeCombinations describes combinations
*/
func (a *Client) DescribeCombinations(params *DescribeCombinationsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeCombinationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeCombinationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeCombinations",
		Method:             "GET",
		PathPattern:        "/v1/metering/combinations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeCombinationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeCombinationsOK), nil

}

/*
ModifyCombination modifies combination
*/
func (a *Client) ModifyCombination(params *ModifyCombinationParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyCombinationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyCombinationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyCombination",
		Method:             "PUT",
		PathPattern:        "/v1/metering/combination",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyCombinationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyCombinationOK), nil

}

/*
ModifyCombinationSku modifies combination sku
*/
func (a *Client) ModifyCombinationSku(params *ModifyCombinationSkuParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyCombinationSkuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyCombinationSkuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyCombinationSku",
		Method:             "PUT",
		PathPattern:        "/v1/metering/combination/sku",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyCombinationSkuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyCombinationSkuOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
