// Code generated by go-swagger; DO NOT EDIT.

package billing_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new billing manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for billing manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateAccount creates account
*/
func (a *Client) CreateAccount(params *CreateAccountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAccount",
		Method:             "POST",
		PathPattern:        "/v1/billing/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAccountOK), nil

}

/*
CreatePrice creates price of the sku with metering attribute
*/
func (a *Client) CreatePrice(params *CreatePriceParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePriceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePrice",
		Method:             "POST",
		PathPattern:        "/v1/billing/price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreatePriceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePriceOK), nil

}

/*
CreateRecharge recharges for user
*/
func (a *Client) CreateRecharge(params *CreateRechargeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRechargeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRechargeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRecharge",
		Method:             "POST",
		PathPattern:        "/v1/billing/recharge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRechargeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRechargeOK), nil

}

/*
CreateWithdraw creates withdraw
*/
func (a *Client) CreateWithdraw(params *CreateWithdrawParams, authInfo runtime.ClientAuthInfoWriter) (*CreateWithdrawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWithdrawParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateWithdraw",
		Method:             "POST",
		PathPattern:        "/v1/billing/withdraw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateWithdrawReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateWithdrawOK), nil

}

/*
DeleteAccounts deletes accounts
*/
func (a *Client) DeleteAccounts(params *DeleteAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAccounts",
		Method:             "DELETE",
		PathPattern:        "/v1/billing/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAccountsOK), nil

}

/*
DeletePrices deletes prices
*/
func (a *Client) DeletePrices(params *DeletePricesParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePricesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePricesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePrices",
		Method:             "DELETE",
		PathPattern:        "/v1/billing/prices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePricesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePricesOK), nil

}

/*
DescribeAccounts describes accounts
*/
func (a *Client) DescribeAccounts(params *DescribeAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeAccounts",
		Method:             "GET",
		PathPattern:        "/v1/billing/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeAccountsOK), nil

}

/*
DescribeCharges describes charges
*/
func (a *Client) DescribeCharges(params *DescribeChargesParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeChargesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeChargesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeCharges",
		Method:             "GET",
		PathPattern:        "/v1/billing/charges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeChargesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeChargesOK), nil

}

/*
DescribeIncomes describes incomes
*/
func (a *Client) DescribeIncomes(params *DescribeIncomesParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeIncomesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeIncomesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeIncomes",
		Method:             "GET",
		PathPattern:        "/v1/billing/incomes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeIncomesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeIncomesOK), nil

}

/*
DescribeLeasedContracts describes leased contract
*/
func (a *Client) DescribeLeasedContracts(params *DescribeLeasedContractsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeLeasedContractsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeLeasedContractsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeLeasedContracts",
		Method:             "GET",
		PathPattern:        "/v1/billing/leased/contracts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeLeasedContractsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeLeasedContractsOK), nil

}

/*
DescribeLeasingContracts describes leasing contract
*/
func (a *Client) DescribeLeasingContracts(params *DescribeLeasingContractsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeLeasingContractsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeLeasingContractsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeLeasingContracts",
		Method:             "GET",
		PathPattern:        "/v1/billing/leasing/contracts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeLeasingContractsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeLeasingContractsOK), nil

}

/*
DescribePrices describes prices
*/
func (a *Client) DescribePrices(params *DescribePricesParams, authInfo runtime.ClientAuthInfoWriter) (*DescribePricesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribePricesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribePrices",
		Method:             "GET",
		PathPattern:        "/v1/billing/prices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribePricesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribePricesOK), nil

}

/*
DescribeRecharges describes recharges
*/
func (a *Client) DescribeRecharges(params *DescribeRechargesParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeRechargesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRechargesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeRecharges",
		Method:             "GET",
		PathPattern:        "/v1/billing/recharges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeRechargesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeRechargesOK), nil

}

/*
DescribeRefunds describes refunds
*/
func (a *Client) DescribeRefunds(params *DescribeRefundsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeRefundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRefundsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeRefunds",
		Method:             "GET",
		PathPattern:        "/v1/billing/refunds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeRefundsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeRefundsOK), nil

}

/*
DescribeWithdraws describes withdraws
*/
func (a *Client) DescribeWithdraws(params *DescribeWithdrawsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeWithdrawsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeWithdrawsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeWithdraws",
		Method:             "GET",
		PathPattern:        "/v1/billing/withdraws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeWithdrawsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeWithdrawsOK), nil

}

/*
ModifyAccount modifies account
*/
func (a *Client) ModifyAccount(params *ModifyAccountParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyAccount",
		Method:             "PUT",
		PathPattern:        "/v1/billing/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyAccountOK), nil

}

/*
ModifyPrice modifies price
*/
func (a *Client) ModifyPrice(params *ModifyPriceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyPriceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyPrice",
		Method:             "PUT",
		PathPattern:        "/v1/billing/price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyPriceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyPriceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
