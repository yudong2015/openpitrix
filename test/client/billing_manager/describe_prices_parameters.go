// Code generated by go-swagger; DO NOT EDIT.

package billing_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribePricesParams creates a new DescribePricesParams object
// with the default values initialized.
func NewDescribePricesParams() *DescribePricesParams {
	var ()
	return &DescribePricesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribePricesParamsWithTimeout creates a new DescribePricesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribePricesParamsWithTimeout(timeout time.Duration) *DescribePricesParams {
	var ()
	return &DescribePricesParams{

		timeout: timeout,
	}
}

// NewDescribePricesParamsWithContext creates a new DescribePricesParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribePricesParamsWithContext(ctx context.Context) *DescribePricesParams {
	var ()
	return &DescribePricesParams{

		Context: ctx,
	}
}

// NewDescribePricesParamsWithHTTPClient creates a new DescribePricesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribePricesParamsWithHTTPClient(client *http.Client) *DescribePricesParams {
	var ()
	return &DescribePricesParams{
		HTTPClient: client,
	}
}

/*DescribePricesParams contains all the parameters to send to the API endpoint
for the describe prices operation typically these are written to a http.Request
*/
type DescribePricesParams struct {

	/*AttributeID*/
	AttributeID *string
	/*EndTime*/
	EndTime *strfmt.DateTime
	/*Limit*/
	Limit *int64
	/*Offset*/
	Offset *int64
	/*PriceID*/
	PriceID *string
	/*Reverse*/
	Reverse *bool
	/*SkuID*/
	SkuID *string
	/*SortKey*/
	SortKey *string
	/*StartTime*/
	StartTime *strfmt.DateTime
	/*Status*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe prices params
func (o *DescribePricesParams) WithTimeout(timeout time.Duration) *DescribePricesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe prices params
func (o *DescribePricesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe prices params
func (o *DescribePricesParams) WithContext(ctx context.Context) *DescribePricesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe prices params
func (o *DescribePricesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe prices params
func (o *DescribePricesParams) WithHTTPClient(client *http.Client) *DescribePricesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe prices params
func (o *DescribePricesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttributeID adds the attributeID to the describe prices params
func (o *DescribePricesParams) WithAttributeID(attributeID *string) *DescribePricesParams {
	o.SetAttributeID(attributeID)
	return o
}

// SetAttributeID adds the attributeId to the describe prices params
func (o *DescribePricesParams) SetAttributeID(attributeID *string) {
	o.AttributeID = attributeID
}

// WithEndTime adds the endTime to the describe prices params
func (o *DescribePricesParams) WithEndTime(endTime *strfmt.DateTime) *DescribePricesParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the describe prices params
func (o *DescribePricesParams) SetEndTime(endTime *strfmt.DateTime) {
	o.EndTime = endTime
}

// WithLimit adds the limit to the describe prices params
func (o *DescribePricesParams) WithLimit(limit *int64) *DescribePricesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe prices params
func (o *DescribePricesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the describe prices params
func (o *DescribePricesParams) WithOffset(offset *int64) *DescribePricesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe prices params
func (o *DescribePricesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPriceID adds the priceID to the describe prices params
func (o *DescribePricesParams) WithPriceID(priceID *string) *DescribePricesParams {
	o.SetPriceID(priceID)
	return o
}

// SetPriceID adds the priceId to the describe prices params
func (o *DescribePricesParams) SetPriceID(priceID *string) {
	o.PriceID = priceID
}

// WithReverse adds the reverse to the describe prices params
func (o *DescribePricesParams) WithReverse(reverse *bool) *DescribePricesParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the describe prices params
func (o *DescribePricesParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSkuID adds the skuID to the describe prices params
func (o *DescribePricesParams) WithSkuID(skuID *string) *DescribePricesParams {
	o.SetSkuID(skuID)
	return o
}

// SetSkuID adds the skuId to the describe prices params
func (o *DescribePricesParams) SetSkuID(skuID *string) {
	o.SkuID = skuID
}

// WithSortKey adds the sortKey to the describe prices params
func (o *DescribePricesParams) WithSortKey(sortKey *string) *DescribePricesParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the describe prices params
func (o *DescribePricesParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithStartTime adds the startTime to the describe prices params
func (o *DescribePricesParams) WithStartTime(startTime *strfmt.DateTime) *DescribePricesParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the describe prices params
func (o *DescribePricesParams) SetStartTime(startTime *strfmt.DateTime) {
	o.StartTime = startTime
}

// WithStatus adds the status to the describe prices params
func (o *DescribePricesParams) WithStatus(status *string) *DescribePricesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the describe prices params
func (o *DescribePricesParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *DescribePricesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AttributeID != nil {

		// query param attribute_id
		var qrAttributeID string
		if o.AttributeID != nil {
			qrAttributeID = *o.AttributeID
		}
		qAttributeID := qrAttributeID
		if qAttributeID != "" {
			if err := r.SetQueryParam("attribute_id", qAttributeID); err != nil {
				return err
			}
		}

	}

	if o.EndTime != nil {

		// query param end_time
		var qrEndTime strfmt.DateTime
		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime.String()
		if qEndTime != "" {
			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.PriceID != nil {

		// query param price_id
		var qrPriceID string
		if o.PriceID != nil {
			qrPriceID = *o.PriceID
		}
		qPriceID := qrPriceID
		if qPriceID != "" {
			if err := r.SetQueryParam("price_id", qPriceID); err != nil {
				return err
			}
		}

	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool
		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {
			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}

	}

	if o.SkuID != nil {

		// query param sku_id
		var qrSkuID string
		if o.SkuID != nil {
			qrSkuID = *o.SkuID
		}
		qSkuID := qrSkuID
		if qSkuID != "" {
			if err := r.SetQueryParam("sku_id", qSkuID); err != nil {
				return err
			}
		}

	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string
		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {
			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}

	}

	if o.StartTime != nil {

		// query param start_time
		var qrStartTime strfmt.DateTime
		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime.String()
		if qStartTime != "" {
			if err := r.SetQueryParam("start_time", qStartTime); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
