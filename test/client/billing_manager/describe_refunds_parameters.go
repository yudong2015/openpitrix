// Code generated by go-swagger; DO NOT EDIT.

package billing_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeRefundsParams creates a new DescribeRefundsParams object
// with the default values initialized.
func NewDescribeRefundsParams() *DescribeRefundsParams {
	var ()
	return &DescribeRefundsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeRefundsParamsWithTimeout creates a new DescribeRefundsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeRefundsParamsWithTimeout(timeout time.Duration) *DescribeRefundsParams {
	var ()
	return &DescribeRefundsParams{

		timeout: timeout,
	}
}

// NewDescribeRefundsParamsWithContext creates a new DescribeRefundsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeRefundsParamsWithContext(ctx context.Context) *DescribeRefundsParams {
	var ()
	return &DescribeRefundsParams{

		Context: ctx,
	}
}

// NewDescribeRefundsParamsWithHTTPClient creates a new DescribeRefundsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeRefundsParamsWithHTTPClient(client *http.Client) *DescribeRefundsParams {
	var ()
	return &DescribeRefundsParams{
		HTTPClient: client,
	}
}

/*DescribeRefundsParams contains all the parameters to send to the API endpoint
for the describe refunds operation typically these are written to a http.Request
*/
type DescribeRefundsParams struct {

	/*ContractID*/
	ContractID *string
	/*Limit*/
	Limit *int64
	/*Offset*/
	Offset *int64
	/*RefundID*/
	RefundID *string
	/*Reverse*/
	Reverse *bool
	/*SortKey*/
	SortKey *string
	/*UserID*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe refunds params
func (o *DescribeRefundsParams) WithTimeout(timeout time.Duration) *DescribeRefundsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe refunds params
func (o *DescribeRefundsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe refunds params
func (o *DescribeRefundsParams) WithContext(ctx context.Context) *DescribeRefundsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe refunds params
func (o *DescribeRefundsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe refunds params
func (o *DescribeRefundsParams) WithHTTPClient(client *http.Client) *DescribeRefundsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe refunds params
func (o *DescribeRefundsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContractID adds the contractID to the describe refunds params
func (o *DescribeRefundsParams) WithContractID(contractID *string) *DescribeRefundsParams {
	o.SetContractID(contractID)
	return o
}

// SetContractID adds the contractId to the describe refunds params
func (o *DescribeRefundsParams) SetContractID(contractID *string) {
	o.ContractID = contractID
}

// WithLimit adds the limit to the describe refunds params
func (o *DescribeRefundsParams) WithLimit(limit *int64) *DescribeRefundsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe refunds params
func (o *DescribeRefundsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the describe refunds params
func (o *DescribeRefundsParams) WithOffset(offset *int64) *DescribeRefundsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe refunds params
func (o *DescribeRefundsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithRefundID adds the refundID to the describe refunds params
func (o *DescribeRefundsParams) WithRefundID(refundID *string) *DescribeRefundsParams {
	o.SetRefundID(refundID)
	return o
}

// SetRefundID adds the refundId to the describe refunds params
func (o *DescribeRefundsParams) SetRefundID(refundID *string) {
	o.RefundID = refundID
}

// WithReverse adds the reverse to the describe refunds params
func (o *DescribeRefundsParams) WithReverse(reverse *bool) *DescribeRefundsParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the describe refunds params
func (o *DescribeRefundsParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSortKey adds the sortKey to the describe refunds params
func (o *DescribeRefundsParams) WithSortKey(sortKey *string) *DescribeRefundsParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the describe refunds params
func (o *DescribeRefundsParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithUserID adds the userID to the describe refunds params
func (o *DescribeRefundsParams) WithUserID(userID *string) *DescribeRefundsParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the describe refunds params
func (o *DescribeRefundsParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeRefundsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContractID != nil {

		// query param contract_id
		var qrContractID string
		if o.ContractID != nil {
			qrContractID = *o.ContractID
		}
		qContractID := qrContractID
		if qContractID != "" {
			if err := r.SetQueryParam("contract_id", qContractID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.RefundID != nil {

		// query param refund_id
		var qrRefundID string
		if o.RefundID != nil {
			qrRefundID = *o.RefundID
		}
		qRefundID := qrRefundID
		if qRefundID != "" {
			if err := r.SetQueryParam("refund_id", qRefundID); err != nil {
				return err
			}
		}

	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool
		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {
			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}

	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string
		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {
			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {
			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
