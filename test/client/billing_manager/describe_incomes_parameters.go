// Code generated by go-swagger; DO NOT EDIT.

package billing_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeIncomesParams creates a new DescribeIncomesParams object
// with the default values initialized.
func NewDescribeIncomesParams() *DescribeIncomesParams {
	var ()
	return &DescribeIncomesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeIncomesParamsWithTimeout creates a new DescribeIncomesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeIncomesParamsWithTimeout(timeout time.Duration) *DescribeIncomesParams {
	var ()
	return &DescribeIncomesParams{

		timeout: timeout,
	}
}

// NewDescribeIncomesParamsWithContext creates a new DescribeIncomesParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeIncomesParamsWithContext(ctx context.Context) *DescribeIncomesParams {
	var ()
	return &DescribeIncomesParams{

		Context: ctx,
	}
}

// NewDescribeIncomesParamsWithHTTPClient creates a new DescribeIncomesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeIncomesParamsWithHTTPClient(client *http.Client) *DescribeIncomesParams {
	var ()
	return &DescribeIncomesParams{
		HTTPClient: client,
	}
}

/*DescribeIncomesParams contains all the parameters to send to the API endpoint
for the describe incomes operation typically these are written to a http.Request
*/
type DescribeIncomesParams struct {

	/*ContractID*/
	ContractID *string
	/*IncomeID*/
	IncomeID *string
	/*Limit*/
	Limit *int64
	/*Offset*/
	Offset *int64
	/*OwnerID*/
	OwnerID *string
	/*Reverse*/
	Reverse *bool
	/*SortKey*/
	SortKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe incomes params
func (o *DescribeIncomesParams) WithTimeout(timeout time.Duration) *DescribeIncomesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe incomes params
func (o *DescribeIncomesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe incomes params
func (o *DescribeIncomesParams) WithContext(ctx context.Context) *DescribeIncomesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe incomes params
func (o *DescribeIncomesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe incomes params
func (o *DescribeIncomesParams) WithHTTPClient(client *http.Client) *DescribeIncomesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe incomes params
func (o *DescribeIncomesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContractID adds the contractID to the describe incomes params
func (o *DescribeIncomesParams) WithContractID(contractID *string) *DescribeIncomesParams {
	o.SetContractID(contractID)
	return o
}

// SetContractID adds the contractId to the describe incomes params
func (o *DescribeIncomesParams) SetContractID(contractID *string) {
	o.ContractID = contractID
}

// WithIncomeID adds the incomeID to the describe incomes params
func (o *DescribeIncomesParams) WithIncomeID(incomeID *string) *DescribeIncomesParams {
	o.SetIncomeID(incomeID)
	return o
}

// SetIncomeID adds the incomeId to the describe incomes params
func (o *DescribeIncomesParams) SetIncomeID(incomeID *string) {
	o.IncomeID = incomeID
}

// WithLimit adds the limit to the describe incomes params
func (o *DescribeIncomesParams) WithLimit(limit *int64) *DescribeIncomesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe incomes params
func (o *DescribeIncomesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the describe incomes params
func (o *DescribeIncomesParams) WithOffset(offset *int64) *DescribeIncomesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe incomes params
func (o *DescribeIncomesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOwnerID adds the ownerID to the describe incomes params
func (o *DescribeIncomesParams) WithOwnerID(ownerID *string) *DescribeIncomesParams {
	o.SetOwnerID(ownerID)
	return o
}

// SetOwnerID adds the ownerId to the describe incomes params
func (o *DescribeIncomesParams) SetOwnerID(ownerID *string) {
	o.OwnerID = ownerID
}

// WithReverse adds the reverse to the describe incomes params
func (o *DescribeIncomesParams) WithReverse(reverse *bool) *DescribeIncomesParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the describe incomes params
func (o *DescribeIncomesParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSortKey adds the sortKey to the describe incomes params
func (o *DescribeIncomesParams) WithSortKey(sortKey *string) *DescribeIncomesParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the describe incomes params
func (o *DescribeIncomesParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeIncomesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContractID != nil {

		// query param contract_id
		var qrContractID string
		if o.ContractID != nil {
			qrContractID = *o.ContractID
		}
		qContractID := qrContractID
		if qContractID != "" {
			if err := r.SetQueryParam("contract_id", qContractID); err != nil {
				return err
			}
		}

	}

	if o.IncomeID != nil {

		// query param income_id
		var qrIncomeID string
		if o.IncomeID != nil {
			qrIncomeID = *o.IncomeID
		}
		qIncomeID := qrIncomeID
		if qIncomeID != "" {
			if err := r.SetQueryParam("income_id", qIncomeID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.OwnerID != nil {

		// query param owner_id
		var qrOwnerID string
		if o.OwnerID != nil {
			qrOwnerID = *o.OwnerID
		}
		qOwnerID := qrOwnerID
		if qOwnerID != "" {
			if err := r.SetQueryParam("owner_id", qOwnerID); err != nil {
				return err
			}
		}

	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool
		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {
			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}

	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string
		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {
			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
