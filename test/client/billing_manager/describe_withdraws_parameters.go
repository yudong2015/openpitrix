// Code generated by go-swagger; DO NOT EDIT.

package billing_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeWithdrawsParams creates a new DescribeWithdrawsParams object
// with the default values initialized.
func NewDescribeWithdrawsParams() *DescribeWithdrawsParams {
	var ()
	return &DescribeWithdrawsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeWithdrawsParamsWithTimeout creates a new DescribeWithdrawsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeWithdrawsParamsWithTimeout(timeout time.Duration) *DescribeWithdrawsParams {
	var ()
	return &DescribeWithdrawsParams{

		timeout: timeout,
	}
}

// NewDescribeWithdrawsParamsWithContext creates a new DescribeWithdrawsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeWithdrawsParamsWithContext(ctx context.Context) *DescribeWithdrawsParams {
	var ()
	return &DescribeWithdrawsParams{

		Context: ctx,
	}
}

// NewDescribeWithdrawsParamsWithHTTPClient creates a new DescribeWithdrawsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeWithdrawsParamsWithHTTPClient(client *http.Client) *DescribeWithdrawsParams {
	var ()
	return &DescribeWithdrawsParams{
		HTTPClient: client,
	}
}

/*DescribeWithdrawsParams contains all the parameters to send to the API endpoint
for the describe withdraws operation typically these are written to a http.Request
*/
type DescribeWithdrawsParams struct {

	/*Limit*/
	Limit *int64
	/*Offset*/
	Offset *int64
	/*Reverse*/
	Reverse *bool
	/*SortKey*/
	SortKey *string
	/*Status*/
	Status *string
	/*UserID*/
	UserID *string
	/*WithdrawID*/
	WithdrawID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe withdraws params
func (o *DescribeWithdrawsParams) WithTimeout(timeout time.Duration) *DescribeWithdrawsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe withdraws params
func (o *DescribeWithdrawsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe withdraws params
func (o *DescribeWithdrawsParams) WithContext(ctx context.Context) *DescribeWithdrawsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe withdraws params
func (o *DescribeWithdrawsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe withdraws params
func (o *DescribeWithdrawsParams) WithHTTPClient(client *http.Client) *DescribeWithdrawsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe withdraws params
func (o *DescribeWithdrawsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the describe withdraws params
func (o *DescribeWithdrawsParams) WithLimit(limit *int64) *DescribeWithdrawsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe withdraws params
func (o *DescribeWithdrawsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the describe withdraws params
func (o *DescribeWithdrawsParams) WithOffset(offset *int64) *DescribeWithdrawsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe withdraws params
func (o *DescribeWithdrawsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithReverse adds the reverse to the describe withdraws params
func (o *DescribeWithdrawsParams) WithReverse(reverse *bool) *DescribeWithdrawsParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the describe withdraws params
func (o *DescribeWithdrawsParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSortKey adds the sortKey to the describe withdraws params
func (o *DescribeWithdrawsParams) WithSortKey(sortKey *string) *DescribeWithdrawsParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the describe withdraws params
func (o *DescribeWithdrawsParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithStatus adds the status to the describe withdraws params
func (o *DescribeWithdrawsParams) WithStatus(status *string) *DescribeWithdrawsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the describe withdraws params
func (o *DescribeWithdrawsParams) SetStatus(status *string) {
	o.Status = status
}

// WithUserID adds the userID to the describe withdraws params
func (o *DescribeWithdrawsParams) WithUserID(userID *string) *DescribeWithdrawsParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the describe withdraws params
func (o *DescribeWithdrawsParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithWithdrawID adds the withdrawID to the describe withdraws params
func (o *DescribeWithdrawsParams) WithWithdrawID(withdrawID *string) *DescribeWithdrawsParams {
	o.SetWithdrawID(withdrawID)
	return o
}

// SetWithdrawID adds the withdrawId to the describe withdraws params
func (o *DescribeWithdrawsParams) SetWithdrawID(withdrawID *string) {
	o.WithdrawID = withdrawID
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeWithdrawsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool
		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {
			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}

	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string
		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {
			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {
			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}

	}

	if o.WithdrawID != nil {

		// query param withdraw_id
		var qrWithdrawID string
		if o.WithdrawID != nil {
			qrWithdrawID = *o.WithdrawID
		}
		qWithdrawID := qrWithdrawID
		if qWithdrawID != "" {
			if err := r.SetQueryParam("withdraw_id", qWithdrawID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
