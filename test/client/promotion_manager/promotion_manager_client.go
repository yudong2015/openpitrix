// Code generated by go-swagger; DO NOT EDIT.

package promotion_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new promotion manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for promotion manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateCombinationPrice creates combination price of combination sku
*/
func (a *Client) CreateCombinationPrice(params *CreateCombinationPriceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCombinationPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCombinationPriceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateCombinationPrice",
		Method:             "POST",
		PathPattern:        "/v1/billing/combination/price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateCombinationPriceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCombinationPriceOK), nil

}

/*
CreateCoupon creates coupon
*/
func (a *Client) CreateCoupon(params *CreateCouponParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCouponOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCouponParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateCoupon",
		Method:             "POST",
		PathPattern:        "/v1/billing/coupon",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateCouponReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCouponOK), nil

}

/*
CreateCouponReceived receives coupon
*/
func (a *Client) CreateCouponReceived(params *CreateCouponReceivedParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCouponReceivedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCouponReceivedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateCouponReceived",
		Method:             "POST",
		PathPattern:        "/v1/billing/coupon/received",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateCouponReceivedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCouponReceivedOK), nil

}

/*
CreateDiscount creates discount
*/
func (a *Client) CreateDiscount(params *CreateDiscountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDiscountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDiscountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateDiscount",
		Method:             "POST",
		PathPattern:        "/v1/billing/discount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateDiscountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDiscountOK), nil

}

/*
CreateProbation creates probation of sku
*/
func (a *Client) CreateProbation(params *CreateProbationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProbationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProbationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateProbation",
		Method:             "POST",
		PathPattern:        "/v1/billing/probation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProbationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProbationOK), nil

}

/*
DeleteCombinationPrices deletes combination prices
*/
func (a *Client) DeleteCombinationPrices(params *DeleteCombinationPricesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCombinationPricesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCombinationPricesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCombinationPrices",
		Method:             "DELETE",
		PathPattern:        "/v1/billing/combination/prices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCombinationPricesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCombinationPricesOK), nil

}

/*
DeleteCouponReceiveds deletes coupon receiveds
*/
func (a *Client) DeleteCouponReceiveds(params *DeleteCouponReceivedsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCouponReceivedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCouponReceivedsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCouponReceiveds",
		Method:             "DELETE",
		PathPattern:        "/v1/billing/coupon/receiveds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCouponReceivedsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCouponReceivedsOK), nil

}

/*
DeleteCoupons deletes coupons
*/
func (a *Client) DeleteCoupons(params *DeleteCouponsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCouponsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCouponsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCoupons",
		Method:             "DELETE",
		PathPattern:        "/v1/billing/coupons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCouponsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCouponsOK), nil

}

/*
DeleteDiscounts deletes discounts
*/
func (a *Client) DeleteDiscounts(params *DeleteDiscountsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDiscountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDiscountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDiscounts",
		Method:             "DELETE",
		PathPattern:        "/v1/billing/discounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDiscountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDiscountsOK), nil

}

/*
DeleteProbations deletes probations
*/
func (a *Client) DeleteProbations(params *DeleteProbationsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProbationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProbationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteProbations",
		Method:             "DELETE",
		PathPattern:        "/v1/billing/probations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProbationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProbationsOK), nil

}

/*
DescribeCombinationPrices describes combination prices
*/
func (a *Client) DescribeCombinationPrices(params *DescribeCombinationPricesParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeCombinationPricesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeCombinationPricesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeCombinationPrices",
		Method:             "GET",
		PathPattern:        "/v1/billing/combination/prices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeCombinationPricesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeCombinationPricesOK), nil

}

/*
DescribeCouponReceiveds describes coupon receiveds
*/
func (a *Client) DescribeCouponReceiveds(params *DescribeCouponReceivedsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeCouponReceivedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeCouponReceivedsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeCouponReceiveds",
		Method:             "GET",
		PathPattern:        "/v1/billing/coupon/receiveds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeCouponReceivedsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeCouponReceivedsOK), nil

}

/*
DescribeCoupons describes coupons
*/
func (a *Client) DescribeCoupons(params *DescribeCouponsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeCouponsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeCouponsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeCoupons",
		Method:             "GET",
		PathPattern:        "/v1/billing/coupons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeCouponsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeCouponsOK), nil

}

/*
DescribeDiscounts describes discounts
*/
func (a *Client) DescribeDiscounts(params *DescribeDiscountsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeDiscountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDiscountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeDiscounts",
		Method:             "GET",
		PathPattern:        "/v1/billing/discounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeDiscountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeDiscountsOK), nil

}

/*
DescribeProbations describes probations
*/
func (a *Client) DescribeProbations(params *DescribeProbationsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeProbationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeProbationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeProbations",
		Method:             "GET",
		PathPattern:        "/v1/billing/probations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeProbationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeProbationsOK), nil

}

/*
ModifyCombinationPrice modifies combination price
*/
func (a *Client) ModifyCombinationPrice(params *ModifyCombinationPriceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyCombinationPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyCombinationPriceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyCombinationPrice",
		Method:             "PUT",
		PathPattern:        "/v1/billing/combination/price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyCombinationPriceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyCombinationPriceOK), nil

}

/*
ModifyCoupon modifies coupon
*/
func (a *Client) ModifyCoupon(params *ModifyCouponParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyCouponOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyCouponParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyCoupon",
		Method:             "PUT",
		PathPattern:        "/v1/billing/coupon",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyCouponReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyCouponOK), nil

}

/*
ModifyDiscount modifies discount
*/
func (a *Client) ModifyDiscount(params *ModifyDiscountParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyDiscountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyDiscountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyDiscount",
		Method:             "PUT",
		PathPattern:        "/v1/billing/discount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyDiscountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyDiscountOK), nil

}

/*
ModifyProbation modifies probation
*/
func (a *Client) ModifyProbation(params *ModifyProbationParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyProbationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyProbationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyProbation",
		Method:             "PUT",
		PathPattern:        "/v1/billing/probation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyProbationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyProbationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
