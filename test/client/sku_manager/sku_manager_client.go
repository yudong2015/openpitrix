// Code generated by go-swagger; DO NOT EDIT.

package sku_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new sku manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sku manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateAttribute creates attribute
*/
func (a *Client) CreateAttribute(params *CreateAttributeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAttributeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAttribute",
		Method:             "POST",
		PathPattern:        "/v1/metering/attribute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAttributeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAttributeOK), nil

}

/*
CreateAttributeName creates attribute name
*/
func (a *Client) CreateAttributeName(params *CreateAttributeNameParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAttributeNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAttributeNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAttributeName",
		Method:             "POST",
		PathPattern:        "/v1/metering/attribute/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAttributeNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAttributeNameOK), nil

}

/*
CreateAttributeUnit creates attribute unit
*/
func (a *Client) CreateAttributeUnit(params *CreateAttributeUnitParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAttributeUnitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAttributeUnitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAttributeUnit",
		Method:             "POST",
		PathPattern:        "/v1/metering/attribute/unit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAttributeUnitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAttributeUnitOK), nil

}

/*
CreateSku creates sku of the product
*/
func (a *Client) CreateSku(params *CreateSkuParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSkuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSkuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateSku",
		Method:             "POST",
		PathPattern:        "/v1/metering/sku",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateSkuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSkuOK), nil

}

/*
CreateSpu creates spu
*/
func (a *Client) CreateSpu(params *CreateSpuParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSpuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSpuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateSpu",
		Method:             "POST",
		PathPattern:        "/v1/metering/spu",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateSpuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSpuOK), nil

}

/*
DeleteAttributeNames deletes attribute names
*/
func (a *Client) DeleteAttributeNames(params *DeleteAttributeNamesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAttributeNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAttributeNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAttributeNames",
		Method:             "DELETE",
		PathPattern:        "/v1/metering/attribute/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAttributeNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAttributeNamesOK), nil

}

/*
DeleteAttributeUnits deletes attribute units
*/
func (a *Client) DeleteAttributeUnits(params *DeleteAttributeUnitsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAttributeUnitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAttributeUnitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAttributeUnits",
		Method:             "DELETE",
		PathPattern:        "/v1/metering/attribute/units",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAttributeUnitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAttributeUnitsOK), nil

}

/*
DeleteAttributes deletes attributes
*/
func (a *Client) DeleteAttributes(params *DeleteAttributesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAttributes",
		Method:             "DELETE",
		PathPattern:        "/v1/metering/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAttributesOK), nil

}

/*
DeleteSkus deletes skus
*/
func (a *Client) DeleteSkus(params *DeleteSkusParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSkusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSkusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSkus",
		Method:             "DELETE",
		PathPattern:        "/v1/metering/skus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSkusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSkusOK), nil

}

/*
DeleteSpus deletes spus
*/
func (a *Client) DeleteSpus(params *DeleteSpusParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSpusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSpusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSpus",
		Method:             "DELETE",
		PathPattern:        "/v1/metering/spus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSpusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSpusOK), nil

}

/*
DescribeAttributeNames describes attribute names
*/
func (a *Client) DescribeAttributeNames(params *DescribeAttributeNamesParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeAttributeNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAttributeNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeAttributeNames",
		Method:             "GET",
		PathPattern:        "/v1/metering/attribute/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeAttributeNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeAttributeNamesOK), nil

}

/*
DescribeAttributeUnits describes attribute units
*/
func (a *Client) DescribeAttributeUnits(params *DescribeAttributeUnitsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeAttributeUnitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAttributeUnitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeAttributeUnits",
		Method:             "GET",
		PathPattern:        "/v1/metering/attribute/units",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeAttributeUnitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeAttributeUnitsOK), nil

}

/*
DescribeAttributes describes attributes
*/
func (a *Client) DescribeAttributes(params *DescribeAttributesParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeAttributes",
		Method:             "GET",
		PathPattern:        "/v1/metering/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeAttributesOK), nil

}

/*
DescribeSkus describes skus
*/
func (a *Client) DescribeSkus(params *DescribeSkusParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeSkusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeSkusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeSkus",
		Method:             "GET",
		PathPattern:        "/v1/metering/skus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeSkusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeSkusOK), nil

}

/*
DescribeSpus describes spus
*/
func (a *Client) DescribeSpus(params *DescribeSpusParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeSpusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeSpusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeSpus",
		Method:             "GET",
		PathPattern:        "/v1/metering/spus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeSpusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeSpusOK), nil

}

/*
ModifyAttribute modifies attribute
*/
func (a *Client) ModifyAttribute(params *ModifyAttributeParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyAttributeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyAttribute",
		Method:             "PUT",
		PathPattern:        "/v1/metering/attribute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyAttributeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyAttributeOK), nil

}

/*
ModifyAttributeName modifies attribute name
*/
func (a *Client) ModifyAttributeName(params *ModifyAttributeNameParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyAttributeNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyAttributeNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyAttributeName",
		Method:             "PUT",
		PathPattern:        "/v1/metering/attribute/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyAttributeNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyAttributeNameOK), nil

}

/*
ModifyAttributeUnit modifies attribute unit
*/
func (a *Client) ModifyAttributeUnit(params *ModifyAttributeUnitParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyAttributeUnitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyAttributeUnitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyAttributeUnit",
		Method:             "PUT",
		PathPattern:        "/v1/metering/attribute/unit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyAttributeUnitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyAttributeUnitOK), nil

}

/*
ModifySku modifies sku
*/
func (a *Client) ModifySku(params *ModifySkuParams, authInfo runtime.ClientAuthInfoWriter) (*ModifySkuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifySkuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifySku",
		Method:             "PUT",
		PathPattern:        "/v1/metering/sku",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifySkuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifySkuOK), nil

}

/*
ModifySpu modifies spu
*/
func (a *Client) ModifySpu(params *ModifySpuParams, authInfo runtime.ClientAuthInfoWriter) (*ModifySpuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifySpuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifySpu",
		Method:             "PUT",
		PathPattern:        "/v1/metering/spu",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifySpuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifySpuOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
