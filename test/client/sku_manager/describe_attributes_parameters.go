// Code generated by go-swagger; DO NOT EDIT.

package sku_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeAttributesParams creates a new DescribeAttributesParams object
// with the default values initialized.
func NewDescribeAttributesParams() *DescribeAttributesParams {
	var ()
	return &DescribeAttributesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeAttributesParamsWithTimeout creates a new DescribeAttributesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeAttributesParamsWithTimeout(timeout time.Duration) *DescribeAttributesParams {
	var ()
	return &DescribeAttributesParams{

		timeout: timeout,
	}
}

// NewDescribeAttributesParamsWithContext creates a new DescribeAttributesParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeAttributesParamsWithContext(ctx context.Context) *DescribeAttributesParams {
	var ()
	return &DescribeAttributesParams{

		Context: ctx,
	}
}

// NewDescribeAttributesParamsWithHTTPClient creates a new DescribeAttributesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeAttributesParamsWithHTTPClient(client *http.Client) *DescribeAttributesParams {
	var ()
	return &DescribeAttributesParams{
		HTTPClient: client,
	}
}

/*DescribeAttributesParams contains all the parameters to send to the API endpoint
for the describe attributes operation typically these are written to a http.Request
*/
type DescribeAttributesParams struct {

	/*AttributeID*/
	AttributeID *string
	/*AttributeNameID*/
	AttributeNameID *string
	/*AttributeUnitID*/
	AttributeUnitID *string
	/*Limit*/
	Limit *int64
	/*Offset*/
	Offset *int64
	/*Owner*/
	Owner *string
	/*Reverse*/
	Reverse *bool
	/*SortKey*/
	SortKey *string
	/*Status*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe attributes params
func (o *DescribeAttributesParams) WithTimeout(timeout time.Duration) *DescribeAttributesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe attributes params
func (o *DescribeAttributesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe attributes params
func (o *DescribeAttributesParams) WithContext(ctx context.Context) *DescribeAttributesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe attributes params
func (o *DescribeAttributesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe attributes params
func (o *DescribeAttributesParams) WithHTTPClient(client *http.Client) *DescribeAttributesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe attributes params
func (o *DescribeAttributesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttributeID adds the attributeID to the describe attributes params
func (o *DescribeAttributesParams) WithAttributeID(attributeID *string) *DescribeAttributesParams {
	o.SetAttributeID(attributeID)
	return o
}

// SetAttributeID adds the attributeId to the describe attributes params
func (o *DescribeAttributesParams) SetAttributeID(attributeID *string) {
	o.AttributeID = attributeID
}

// WithAttributeNameID adds the attributeNameID to the describe attributes params
func (o *DescribeAttributesParams) WithAttributeNameID(attributeNameID *string) *DescribeAttributesParams {
	o.SetAttributeNameID(attributeNameID)
	return o
}

// SetAttributeNameID adds the attributeNameId to the describe attributes params
func (o *DescribeAttributesParams) SetAttributeNameID(attributeNameID *string) {
	o.AttributeNameID = attributeNameID
}

// WithAttributeUnitID adds the attributeUnitID to the describe attributes params
func (o *DescribeAttributesParams) WithAttributeUnitID(attributeUnitID *string) *DescribeAttributesParams {
	o.SetAttributeUnitID(attributeUnitID)
	return o
}

// SetAttributeUnitID adds the attributeUnitId to the describe attributes params
func (o *DescribeAttributesParams) SetAttributeUnitID(attributeUnitID *string) {
	o.AttributeUnitID = attributeUnitID
}

// WithLimit adds the limit to the describe attributes params
func (o *DescribeAttributesParams) WithLimit(limit *int64) *DescribeAttributesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe attributes params
func (o *DescribeAttributesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the describe attributes params
func (o *DescribeAttributesParams) WithOffset(offset *int64) *DescribeAttributesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe attributes params
func (o *DescribeAttributesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOwner adds the owner to the describe attributes params
func (o *DescribeAttributesParams) WithOwner(owner *string) *DescribeAttributesParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the describe attributes params
func (o *DescribeAttributesParams) SetOwner(owner *string) {
	o.Owner = owner
}

// WithReverse adds the reverse to the describe attributes params
func (o *DescribeAttributesParams) WithReverse(reverse *bool) *DescribeAttributesParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the describe attributes params
func (o *DescribeAttributesParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSortKey adds the sortKey to the describe attributes params
func (o *DescribeAttributesParams) WithSortKey(sortKey *string) *DescribeAttributesParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the describe attributes params
func (o *DescribeAttributesParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithStatus adds the status to the describe attributes params
func (o *DescribeAttributesParams) WithStatus(status *string) *DescribeAttributesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the describe attributes params
func (o *DescribeAttributesParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeAttributesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AttributeID != nil {

		// query param attribute_id
		var qrAttributeID string
		if o.AttributeID != nil {
			qrAttributeID = *o.AttributeID
		}
		qAttributeID := qrAttributeID
		if qAttributeID != "" {
			if err := r.SetQueryParam("attribute_id", qAttributeID); err != nil {
				return err
			}
		}

	}

	if o.AttributeNameID != nil {

		// query param attribute_name_id
		var qrAttributeNameID string
		if o.AttributeNameID != nil {
			qrAttributeNameID = *o.AttributeNameID
		}
		qAttributeNameID := qrAttributeNameID
		if qAttributeNameID != "" {
			if err := r.SetQueryParam("attribute_name_id", qAttributeNameID); err != nil {
				return err
			}
		}

	}

	if o.AttributeUnitID != nil {

		// query param attribute_unit_id
		var qrAttributeUnitID string
		if o.AttributeUnitID != nil {
			qrAttributeUnitID = *o.AttributeUnitID
		}
		qAttributeUnitID := qrAttributeUnitID
		if qAttributeUnitID != "" {
			if err := r.SetQueryParam("attribute_unit_id", qAttributeUnitID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Owner != nil {

		// query param owner
		var qrOwner string
		if o.Owner != nil {
			qrOwner = *o.Owner
		}
		qOwner := qrOwner
		if qOwner != "" {
			if err := r.SetQueryParam("owner", qOwner); err != nil {
				return err
			}
		}

	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool
		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {
			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}

	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string
		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {
			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
