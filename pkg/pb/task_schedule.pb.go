// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task_schedule.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ScheduleTask struct {
	TaskId               *wrappers.StringValue `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Handler              *wrappers.StringValue `protobuf:"bytes,2,opt,name=handler,proto3" json:"handler,omitempty"`
	Action               *wrappers.StringValue `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Conf                 *wrappers.StringValue `protobuf:"bytes,4,opt,name=conf,proto3" json:"conf,omitempty"`
	Status               *wrappers.StringValue `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	RetryTimes           *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=retry_times,json=retryTimes,proto3" json:"retry_times,omitempty"`
	CreateTime           *timestamp.Timestamp  `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ScheduleTask) Reset()         { *m = ScheduleTask{} }
func (m *ScheduleTask) String() string { return proto.CompactTextString(m) }
func (*ScheduleTask) ProtoMessage()    {}
func (*ScheduleTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_838bf5d950b53e21, []int{0}
}

func (m *ScheduleTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleTask.Unmarshal(m, b)
}
func (m *ScheduleTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleTask.Marshal(b, m, deterministic)
}
func (m *ScheduleTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleTask.Merge(m, src)
}
func (m *ScheduleTask) XXX_Size() int {
	return xxx_messageInfo_ScheduleTask.Size(m)
}
func (m *ScheduleTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleTask.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleTask proto.InternalMessageInfo

func (m *ScheduleTask) GetTaskId() *wrappers.StringValue {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *ScheduleTask) GetHandler() *wrappers.StringValue {
	if m != nil {
		return m.Handler
	}
	return nil
}

func (m *ScheduleTask) GetAction() *wrappers.StringValue {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ScheduleTask) GetConf() *wrappers.StringValue {
	if m != nil {
		return m.Conf
	}
	return nil
}

func (m *ScheduleTask) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ScheduleTask) GetRetryTimes() *wrappers.UInt32Value {
	if m != nil {
		return m.RetryTimes
	}
	return nil
}

func (m *ScheduleTask) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

type CreateScheduleTaskRequest struct {
	Handler              *wrappers.StringValue `protobuf:"bytes,2,opt,name=handler,proto3" json:"handler,omitempty"`
	Action               *wrappers.StringValue `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Conf                 *wrappers.StringValue `protobuf:"bytes,4,opt,name=conf,proto3" json:"conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateScheduleTaskRequest) Reset()         { *m = CreateScheduleTaskRequest{} }
func (m *CreateScheduleTaskRequest) String() string { return proto.CompactTextString(m) }
func (*CreateScheduleTaskRequest) ProtoMessage()    {}
func (*CreateScheduleTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_838bf5d950b53e21, []int{1}
}

func (m *CreateScheduleTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateScheduleTaskRequest.Unmarshal(m, b)
}
func (m *CreateScheduleTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateScheduleTaskRequest.Marshal(b, m, deterministic)
}
func (m *CreateScheduleTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateScheduleTaskRequest.Merge(m, src)
}
func (m *CreateScheduleTaskRequest) XXX_Size() int {
	return xxx_messageInfo_CreateScheduleTaskRequest.Size(m)
}
func (m *CreateScheduleTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateScheduleTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateScheduleTaskRequest proto.InternalMessageInfo

func (m *CreateScheduleTaskRequest) GetHandler() *wrappers.StringValue {
	if m != nil {
		return m.Handler
	}
	return nil
}

func (m *CreateScheduleTaskRequest) GetAction() *wrappers.StringValue {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *CreateScheduleTaskRequest) GetConf() *wrappers.StringValue {
	if m != nil {
		return m.Conf
	}
	return nil
}

type CreateScheduleTaskResponse struct {
	TaskId               *wrappers.StringValue `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateScheduleTaskResponse) Reset()         { *m = CreateScheduleTaskResponse{} }
func (m *CreateScheduleTaskResponse) String() string { return proto.CompactTextString(m) }
func (*CreateScheduleTaskResponse) ProtoMessage()    {}
func (*CreateScheduleTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_838bf5d950b53e21, []int{2}
}

func (m *CreateScheduleTaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateScheduleTaskResponse.Unmarshal(m, b)
}
func (m *CreateScheduleTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateScheduleTaskResponse.Marshal(b, m, deterministic)
}
func (m *CreateScheduleTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateScheduleTaskResponse.Merge(m, src)
}
func (m *CreateScheduleTaskResponse) XXX_Size() int {
	return xxx_messageInfo_CreateScheduleTaskResponse.Size(m)
}
func (m *CreateScheduleTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateScheduleTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateScheduleTaskResponse proto.InternalMessageInfo

func (m *CreateScheduleTaskResponse) GetTaskId() *wrappers.StringValue {
	if m != nil {
		return m.TaskId
	}
	return nil
}

type HandleTaskRequest struct {
	Task                 *ScheduleTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HandleTaskRequest) Reset()         { *m = HandleTaskRequest{} }
func (m *HandleTaskRequest) String() string { return proto.CompactTextString(m) }
func (*HandleTaskRequest) ProtoMessage()    {}
func (*HandleTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_838bf5d950b53e21, []int{3}
}

func (m *HandleTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandleTaskRequest.Unmarshal(m, b)
}
func (m *HandleTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandleTaskRequest.Marshal(b, m, deterministic)
}
func (m *HandleTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleTaskRequest.Merge(m, src)
}
func (m *HandleTaskRequest) XXX_Size() int {
	return xxx_messageInfo_HandleTaskRequest.Size(m)
}
func (m *HandleTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HandleTaskRequest proto.InternalMessageInfo

func (m *HandleTaskRequest) GetTask() *ScheduleTask {
	if m != nil {
		return m.Task
	}
	return nil
}

type HandleTaskResponse struct {
	Succ                 *wrappers.BoolValue `protobuf:"bytes,1,opt,name=succ,proto3" json:"succ,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *HandleTaskResponse) Reset()         { *m = HandleTaskResponse{} }
func (m *HandleTaskResponse) String() string { return proto.CompactTextString(m) }
func (*HandleTaskResponse) ProtoMessage()    {}
func (*HandleTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_838bf5d950b53e21, []int{4}
}

func (m *HandleTaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandleTaskResponse.Unmarshal(m, b)
}
func (m *HandleTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandleTaskResponse.Marshal(b, m, deterministic)
}
func (m *HandleTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleTaskResponse.Merge(m, src)
}
func (m *HandleTaskResponse) XXX_Size() int {
	return xxx_messageInfo_HandleTaskResponse.Size(m)
}
func (m *HandleTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HandleTaskResponse proto.InternalMessageInfo

func (m *HandleTaskResponse) GetSucc() *wrappers.BoolValue {
	if m != nil {
		return m.Succ
	}
	return nil
}

func init() {
	proto.RegisterType((*ScheduleTask)(nil), "openpitrix.ScheduleTask")
	proto.RegisterType((*CreateScheduleTaskRequest)(nil), "openpitrix.CreateScheduleTaskRequest")
	proto.RegisterType((*CreateScheduleTaskResponse)(nil), "openpitrix.CreateScheduleTaskResponse")
	proto.RegisterType((*HandleTaskRequest)(nil), "openpitrix.HandleTaskRequest")
	proto.RegisterType((*HandleTaskResponse)(nil), "openpitrix.HandleTaskResponse")
}

func init() { proto.RegisterFile("task_schedule.proto", fileDescriptor_838bf5d950b53e21) }

var fileDescriptor_838bf5d950b53e21 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x86, 0xd9, 0x36, 0xec, 0x4a, 0xb3, 0x5c, 0x70, 0x2f, 0x26, 0x2a, 0x05, 0x45, 0x02, 0x71,
	0x68, 0x13, 0x94, 0x02, 0x17, 0xc4, 0x81, 0xc2, 0x81, 0x1e, 0x7a, 0xd9, 0x5d, 0x38, 0x20, 0xa1,
	0xca, 0xeb, 0x4c, 0xd3, 0xa8, 0xa9, 0x6d, 0x6c, 0x47, 0x85, 0x27, 0xe1, 0x61, 0x78, 0x39, 0x64,
	0x3b, 0xd1, 0x06, 0xc2, 0x8a, 0x88, 0x53, 0x4f, 0xab, 0xf5, 0x7c, 0xff, 0xfc, 0xff, 0x78, 0x62,
	0xd8, 0xb3, 0xcc, 0x5c, 0x9d, 0x1b, 0x7e, 0x89, 0x45, 0x53, 0x63, 0xaa, 0xb4, 0xb4, 0x92, 0x80,
	0x54, 0x28, 0x54, 0x65, 0x75, 0xf5, 0x2d, 0x3e, 0x28, 0xa5, 0x2c, 0x6b, 0xcc, 0x7c, 0x65, 0xdd,
	0x5c, 0x64, 0x37, 0x9a, 0x29, 0x85, 0xda, 0x04, 0x36, 0x7e, 0xf4, 0x67, 0xdd, 0x56, 0xd7, 0x68,
	0x2c, 0xbb, 0x56, 0x2d, 0xb0, 0xdf, 0x02, 0x4c, 0x55, 0x19, 0x13, 0x42, 0x5a, 0x66, 0x2b, 0x29,
	0x3a, 0xf9, 0xa1, 0xff, 0xe1, 0x47, 0x25, 0x8a, 0x23, 0x73, 0xc3, 0xca, 0x12, 0x75, 0x26, 0x95,
	0x27, 0x86, 0x74, 0xf2, 0x63, 0x17, 0xee, 0x2d, 0xdb, 0xac, 0x2b, 0x66, 0xae, 0xc8, 0x4b, 0x98,
	0xf9, 0x01, 0xaa, 0x82, 0x4e, 0x1e, 0x4f, 0x9e, 0xcd, 0xf3, 0xfd, 0x34, 0xd8, 0xa5, 0x5d, 0x9e,
	0x74, 0x69, 0x75, 0x25, 0xca, 0x4f, 0xac, 0x6e, 0x70, 0x31, 0x75, 0xf0, 0x69, 0x41, 0x5e, 0xc1,
	0xec, 0x92, 0x89, 0xa2, 0x46, 0x4d, 0x77, 0x46, 0xc8, 0x3a, 0x98, 0xbc, 0x80, 0x29, 0xe3, 0x2e,
	0x10, 0xdd, 0x1d, 0xe3, 0x16, 0x58, 0xf2, 0x1c, 0x22, 0x2e, 0xc5, 0x05, 0x8d, 0x46, 0x68, 0x3c,
	0xe9, 0x7c, 0x8c, 0x65, 0xb6, 0x31, 0xf4, 0xee, 0x18, 0x9f, 0xc0, 0x92, 0x37, 0x30, 0xd7, 0x68,
	0xf5, 0xf7, 0x73, 0xbf, 0x02, 0x3a, 0xdd, 0x22, 0xfd, 0x78, 0x2a, 0xec, 0x71, 0x1e, 0xa4, 0xe0,
	0x05, 0x2b, 0xc7, 0x93, 0xd7, 0x30, 0xe7, 0x1a, 0x99, 0x45, 0xaf, 0xa7, 0x33, 0x2f, 0x8f, 0x07,
	0xf2, 0x55, 0xb7, 0xdf, 0x05, 0x04, 0xdc, 0x1d, 0x24, 0x3f, 0x27, 0xf0, 0xe0, 0x9d, 0xff, 0xdb,
	0xdf, 0xcf, 0x02, 0xbf, 0x36, 0x68, 0xec, 0x6d, 0xbf, 0xef, 0x64, 0x09, 0xf1, 0xdf, 0xc2, 0x1b,
	0x25, 0x85, 0xc1, 0xff, 0xfc, 0xc8, 0x92, 0xb7, 0x70, 0xff, 0x83, 0x9f, 0xa3, 0x7f, 0x13, 0x87,
	0x10, 0xb9, 0x72, 0xdb, 0x88, 0xa6, 0x9b, 0x97, 0x96, 0xfe, 0xe6, 0xed, 0xa9, 0xe4, 0x3d, 0x90,
	0x7e, 0x8b, 0x36, 0x4f, 0x0a, 0x91, 0x69, 0x38, 0x6f, 0x7b, 0x0c, 0x37, 0x74, 0x22, 0x65, 0xdd,
	0x4e, 0xe7, 0xb8, 0xdc, 0xc2, 0x9e, 0xd3, 0x77, 0xfd, 0xcf, 0x98, 0x60, 0x25, 0x6a, 0xf2, 0x05,
	0x20, 0x0c, 0xed, 0x5f, 0xd2, 0x93, 0x7e, 0x94, 0xad, 0x9b, 0x8c, 0x9f, 0xfe, 0x0b, 0x0b, 0x19,
	0x93, 0x3b, 0x39, 0x07, 0xe2, 0x4e, 0x42, 0x7e, 0xdd, 0x99, 0x9e, 0x01, 0x6c, 0x26, 0x22, 0x0f,
	0xfb, 0xdd, 0x06, 0x97, 0x15, 0x1f, 0x6c, 0x2b, 0x77, 0x26, 0x27, 0xd1, 0xe7, 0x1d, 0xb5, 0x5e,
	0x4f, 0xfd, 0xe8, 0xc7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xbf, 0x59, 0x73, 0xcd, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskScheduleManagerClient is the client API for TaskScheduleManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskScheduleManagerClient interface {
	CreateTask(ctx context.Context, in *CreateScheduleTaskRequest, opts ...grpc.CallOption) (*CreateScheduleTaskResponse, error)
}

type taskScheduleManagerClient struct {
	cc *grpc.ClientConn
}

func NewTaskScheduleManagerClient(cc *grpc.ClientConn) TaskScheduleManagerClient {
	return &taskScheduleManagerClient{cc}
}

func (c *taskScheduleManagerClient) CreateTask(ctx context.Context, in *CreateScheduleTaskRequest, opts ...grpc.CallOption) (*CreateScheduleTaskResponse, error) {
	out := new(CreateScheduleTaskResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.TaskScheduleManager/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskScheduleManagerServer is the server API for TaskScheduleManager service.
type TaskScheduleManagerServer interface {
	CreateTask(context.Context, *CreateScheduleTaskRequest) (*CreateScheduleTaskResponse, error)
}

func RegisterTaskScheduleManagerServer(s *grpc.Server, srv TaskScheduleManagerServer) {
	s.RegisterService(&_TaskScheduleManager_serviceDesc, srv)
}

func _TaskScheduleManager_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskScheduleManagerServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.TaskScheduleManager/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskScheduleManagerServer).CreateTask(ctx, req.(*CreateScheduleTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskScheduleManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.TaskScheduleManager",
	HandlerType: (*TaskScheduleManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskScheduleManager_CreateTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task_schedule.proto",
}

// TaskHandlerManagerClient is the client API for TaskHandlerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskHandlerManagerClient interface {
	HandleTask(ctx context.Context, in *HandleTaskRequest, opts ...grpc.CallOption) (*HandleTaskResponse, error)
}

type taskHandlerManagerClient struct {
	cc *grpc.ClientConn
}

func NewTaskHandlerManagerClient(cc *grpc.ClientConn) TaskHandlerManagerClient {
	return &taskHandlerManagerClient{cc}
}

func (c *taskHandlerManagerClient) HandleTask(ctx context.Context, in *HandleTaskRequest, opts ...grpc.CallOption) (*HandleTaskResponse, error) {
	out := new(HandleTaskResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.TaskHandlerManager/HandleTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskHandlerManagerServer is the server API for TaskHandlerManager service.
type TaskHandlerManagerServer interface {
	HandleTask(context.Context, *HandleTaskRequest) (*HandleTaskResponse, error)
}

func RegisterTaskHandlerManagerServer(s *grpc.Server, srv TaskHandlerManagerServer) {
	s.RegisterService(&_TaskHandlerManager_serviceDesc, srv)
}

func _TaskHandlerManager_HandleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerManagerServer).HandleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.TaskHandlerManager/HandleTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerManagerServer).HandleTask(ctx, req.(*HandleTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskHandlerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.TaskHandlerManager",
	HandlerType: (*TaskHandlerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleTask",
			Handler:    _TaskHandlerManager_HandleTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task_schedule.proto",
}
